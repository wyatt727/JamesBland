#!/usr/bin/env python3
"""
Asset Copy Script for James Bland: ACME Edition
Copies optimized assets from assets/ to static/ directory for web serving.
"""

import os
import shutil
import glob
from pathlib import Path

def copy_directory_contents(src, dst):
    """Copy all files from src directory to dst directory."""
    if not os.path.exists(src):
        print(f"⚠️  Source directory {src} does not exist")
        return False
    
    os.makedirs(dst, exist_ok=True)
    
    files_copied = 0
    for file_path in glob.glob(os.path.join(src, "*")):
        if os.path.isfile(file_path):
            filename = os.path.basename(file_path)
            dst_path = os.path.join(dst, filename)
            shutil.copy2(file_path, dst_path)
            print(f"  ✓ Copied {filename}")
            files_copied += 1
    
    return files_copied > 0

def validate_asset_sizes():
    """Validate that assets meet size requirements."""
    print("\nValidating asset sizes...")
    
    size_limits = {
        'static/audio/sfx/': 300 * 1024,      # 300 KB max for SFX
        'static/audio/music/': 1024 * 1024,   # 1 MB max for music
        'static/images/': 500 * 1024,         # 500 KB max for images
    }
    
    warnings = []
    
    for directory, max_size in size_limits.items():
        if os.path.exists(directory):
            for file_path in glob.glob(os.path.join(directory, "**/*"), recursive=True):
                if os.path.isfile(file_path):
                    file_size = os.path.getsize(file_path)
                    if file_size > max_size:
                        warnings.append(f"⚠️  {file_path} is {file_size/1024:.1f} KB (limit: {max_size/1024:.1f} KB)")
    
    if warnings:
        print("Size warnings:")
        for warning in warnings:
            print(warning)
    else:
        print("✓ All assets within size limits")

def create_asset_manifest():
    """Create a manifest of all static assets."""
    print("\nCreating asset manifest...")
    
    manifest_content = """# Asset Manifest - James Bland: ACME Edition
# Generated by copy_assets_to_static.py

## Audio Assets

### Sound Effects (static/audio/sfx/)
"""
    
    # List audio files
    sfx_dir = 'static/audio/sfx'
    if os.path.exists(sfx_dir):
        for file_path in sorted(glob.glob(os.path.join(sfx_dir, "*"))):
            if os.path.isfile(file_path):
                filename = os.path.basename(file_path)
                size = os.path.getsize(file_path)
                manifest_content += f"- {filename} ({size/1024:.1f} KB)\n"
    
    manifest_content += "\n### Music (static/audio/music/)\n"
    music_dir = 'static/audio/music'
    if os.path.exists(music_dir):
        for file_path in sorted(glob.glob(os.path.join(music_dir, "*"))):
            if os.path.isfile(file_path):
                filename = os.path.basename(file_path)
                size = os.path.getsize(file_path)
                manifest_content += f"- {filename} ({size/1024:.1f} KB)\n"
    
    manifest_content += "\n## Visual Assets\n\n### UI Components (static/images/UI/)\n"
    ui_dir = 'static/images/UI'
    if os.path.exists(ui_dir):
        for file_path in sorted(glob.glob(os.path.join(ui_dir, "*"))):
            if os.path.isfile(file_path):
                filename = os.path.basename(file_path)
                size = os.path.getsize(file_path)
                manifest_content += f"- {filename} ({size/1024:.1f} KB)\n"
    
    manifest_content += "\n### Board Tiles (static/images/board_tiles/)\n"
    tiles_dir = 'static/images/board_tiles'
    if os.path.exists(tiles_dir):
        for file_path in sorted(glob.glob(os.path.join(tiles_dir, "*"))):
            if os.path.isfile(file_path):
                filename = os.path.basename(file_path)
                size = os.path.getsize(file_path)
                manifest_content += f"- {filename} ({size/1024:.1f} KB)\n"
    
    manifest_content += "\n### Gadget Icons (static/images/gadgets/)\n"
    gadgets_dir = 'static/images/gadgets'
    if os.path.exists(gadgets_dir):
        for file_path in sorted(glob.glob(os.path.join(gadgets_dir, "*"))):
            if os.path.isfile(file_path):
                filename = os.path.basename(file_path)
                size = os.path.getsize(file_path)
                manifest_content += f"- {filename} ({size/1024:.1f} KB)\n"
    
    manifest_content += "\n## Fonts (static/fonts/)\n"
    fonts_dir = 'static/fonts'
    if os.path.exists(fonts_dir):
        for file_path in sorted(glob.glob(os.path.join(fonts_dir, "*"))):
            if os.path.isfile(file_path):
                filename = os.path.basename(file_path)
                size = os.path.getsize(file_path)
                manifest_content += f"- {filename} ({size/1024:.1f} KB)\n"
    
    manifest_content += f"""
## Total Asset Count
- Audio Files: {len(glob.glob('static/audio/**/*', recursive=True))}
- Image Files: {len(glob.glob('static/images/**/*', recursive=True))}
- Font Files: {len(glob.glob('static/fonts/**/*', recursive=True))}

## Notes
- All assets generated using placeholder scripts
- Replace with professional assets for production
- File sizes optimized for mobile LAN gameplay
"""
    
    with open('static/ASSET_MANIFEST.md', 'w') as f:
        f.write(manifest_content)
    
    print("✓ Created asset manifest")

def main():
    """Copy all assets to static directory."""
    print("Copying assets to static directory for web serving")
    print("=" * 60)
    
    # Copy operations
    copy_operations = [
        ('assets/audio/sfx', 'static/audio/sfx'),
        ('assets/audio/music', 'static/audio/music'),
        ('assets/images/UI', 'static/images/UI'),
        ('assets/images/board_tiles', 'static/images/board_tiles'),
        ('assets/images/gadgets', 'static/images/gadgets'),
        ('assets/fonts', 'static/fonts'),
    ]
    
    total_operations = 0
    successful_operations = 0
    
    for src, dst in copy_operations:
        print(f"\nCopying {src} → {dst}")
        if copy_directory_contents(src, dst):
            successful_operations += 1
        total_operations += 1
    
    # Additional font CSS copy
    print(f"\nCopying font styles")
    if os.path.exists('assets/fonts/font-styles.css'):
        shutil.copy2('assets/fonts/font-styles.css', 'static/fonts/')
        print("  ✓ Copied font-styles.css")
    
    # Validate and create manifest
    validate_asset_sizes()
    create_asset_manifest()
    
    print("\n" + "=" * 60)
    print(f"✓ Asset copy complete: {successful_operations}/{total_operations} directories processed")
    print("All assets ready for web serving from static/ directory")
    
    print("\nNext steps:")
    print("1. Include static/fonts/font-styles.css in your main CSS")
    print("2. Test asset loading in web browser")
    print("3. Check ASSET_MANIFEST.md for complete asset listing")
    print("4. Replace placeholder assets with professional versions if needed")

if __name__ == "__main__":
    main() 